import React from "react";
import {
  domToReact,
  HTMLReactParserOptions,
  Element,
  attributesToProps,
} from "html-react-parser";

// import {
// ListItem,
// UnorderedList,
// } from "@chakra-ui/react";
import { TOCAccordion } from "./TOCAccordion";
import { TOCAccordionItem } from "./TOCAccordionItem";
import { LinkInternal } from "components/Link/LinkInternal";

const getHeadingLevel = (attribs: any) => {
  if (!attribs.class || !attribs.class.includes("toctree-l")) {
    // console.log("no class or no 'toctree-l'!");
    return "h6";
  }

  const num = parseInt(attribs.class.split("toctree-l")[1]) as number;

  return (num + 1) as number;
};

/**
 * Replaces raw HTML nodes with Chakra UI React component counterparts
 * for the Table of Contents */
export const tocParser: HTMLReactParserOptions = {
  replace: (domNode) => {
    if (domNode instanceof Element && domNode.attribs) {
      const { attribs, name, children, parent } = domNode;
      const props = attributesToProps(attribs);
      switch (name) {
        case "a":
          if (attribs.class === "headerlink") return null;

          return (
            <LinkInternal to={attribs.href}>
              {domToReact(children, tocParser)}
            </LinkInternal>
          );
        case "div":
          if (attribs.id === "indices-and-tables") {
            return <></>;
          }
          // Ignoring the divs on the index page for the TOC
          return <>{domToReact(children, tocParser)}</>;
        case "h1":
          // removing any html headers generated by the index page to keep just the links
          return <></>;
        case "li":
          /* @ts-expect-error */
          const linkChild = children.filter((c) => c.name === "a");
          /* @ts-expect-error */
          const childrenToCollapse = children.filter((c) => c.name === "ul");
          const headingLevel = getHeadingLevel(attribs) as number;
          // In the edge case where we have no matches, bail
          if (linkChild.length === 0) return <></>;

          if (childrenToCollapse.length > 0) {
            // If the li has ul as children, it must be expandable
            return (
              <TOCAccordionItem
                headingLevel={headingLevel}
                link={domToReact(linkChild, tocParser)}
              >
                {domToReact(childrenToCollapse, tocParser)}
              </TOCAccordionItem>
            );
          } else {
            // Otherwise, it is just an item with no collapsible content
            return (
              <TOCAccordionItem
                headingLevel={headingLevel}
                link={domToReact(linkChild, tocParser)}
                {...props}
              />
            );
          }

        case "p":
          return null;
        case "ul":
          // The root ul becomes the accordion
          // @ts-expect-error
          if (parent.attribs.class.includes("toctree-wrapper")) {
            return (
              <TOCAccordion>{domToReact(children, tocParser)}</TOCAccordion>
            );
          }
          // @ts-expect-error
          if (children.find((c) => c.name === "ul")) {
            // TODO: should this be a ul?
            return <>{domToReact(children, tocParser)}</>;
            // return (
            //   // <UnorderedList {...props}>
            //     <>{domToReact(children, tocParser)}</>
            //   // </UnorderedList>
            // );
          }
          // TODO: should this be a ul?
          return <>{domToReact(children, tocParser)}</>;
        // return (
        //   <UnorderedList {...props}>
        //     {domToReact(children, tocParser)}
        //   </UnorderedList>
        // );

        default:
          console.log("Unaccounted for html element to parse:", name);
          return <></>;
      }
    }
  },
};
